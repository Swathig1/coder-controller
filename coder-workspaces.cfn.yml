AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template Coder Host: Creates a Coder stack using a single
  EC2 instance running docker. This template uses the AWS CloudFormation
  bootstrap scripts to install the packages and files necessary to deploy
  docker, Git and Coder at instance launch time.
Parameters:
  NumTeams:
    Description: Number of teams
    Type: Number
    MinValue: '1'
    MaxValue: '10'
    Default: '6'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  VolumeSize:
    Description: Size of EBS volume in GB
    Type: Number
    Default: 50
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  InstanceType:
    Description: Docker host EC2 instance type
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  EbsAvailabilityZone:
    Description: AZ for the EBS volume
    Type: String
    Default: us-east-1a
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-west-1a
      - us-west-1b
      - us-west-1c
    ConstraintDescription: must be a valid AZ in the region
Mappings:
  AWSInstanceType2Arch:
    t3.large:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t3.large:
      Arch: NATHVM64
    t3.xlarge:
      Arch: NATHVM64
    t3.2xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0c02fb55956c7d316
    us-east-2:
      HVM64: ami-064ff912f78e3e561
    us-west-1:
      HVM64: ami-04a50faf2a2ec1901
    us-west-2:
      HVM64: ami-00ee4df451840fa9d
Resources:
  WebServerEbsVolume:
    Type: 'AWS::EC2::Volume'
    Properties: 
      AvailabilityZone: !Ref 'EbsAvailabilityZone'
      Encrypted: true
      Size: !Ref 'VolumeSize'
      VolumeType: gp3
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - Configure
        Install:
          packages:
            yum:
              docker: []
              git: []
              curl: []
          files:
            /tmp/install.sh:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash -xe
                  - sudo yum update -y
                  - git clone https://github.com/level-up-program/coder-controller.git
                  - cd /coder-controller
                  - make bootstrap-ec2 && make start NUM_TEAMS=
                  - !Ref 'NumTeams'
                  - |+

              mode: '000755'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  - '         --configsets InstallAndRun '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              amazon-ssm-agent:
                enabled: 'true'
                ensureRunning: 'true'
              docker:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            01_clone_coder_controller:
              command: sh -c "$(curl -fsSL https://raw.githubusercontent.com/level-up-program/coder-controller/main/install-ec2.sh)"
              test: cd /coder-controller; (( $? != 0 ))
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: coder-ec2-keypair
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: !Ref 'VolumeSize'
          Encrypted: 'true'
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP access via ports 22, 80, 443, 9000-12000'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9000'
          ToPort: '12000'
          CidrIp: 0.0.0.0/0
Outputs:
  WebsiteURL:
    Description: URL for newly created coder stack
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
